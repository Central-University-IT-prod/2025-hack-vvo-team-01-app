import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Context, Ctx, InjectBot, Start, Update } from 'nestjs-telegraf';
import { Markup, Telegraf } from 'telegraf';

@Update()
@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name);
  private readonly miniAppUrl: string;

  constructor(
    private configService: ConfigService,
    @InjectBot() private readonly bot: Telegraf,
  ) {
    this.miniAppUrl =
      this.configService.get<string>('TELEGRAM_MINI_APP_URL') ||
      'https://t.me/your_mini_app';
  }

  @Start()
  async start(@Ctx() ctx) {
    this.logger.log('Start command received');
    const welcomeMessage =
      `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã!\n\n` +
      `–ó–¥–µ—Å—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n` +
      `‚Ä¢ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–∞—Ö\n` +
      `‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤\n` +
      `‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n\n` +
      `–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`;

    const keyboard = Markup.inlineKeyboard([
      Markup.button.webApp('–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', this.miniAppUrl),
    ]);

    try {
      await ctx.reply(welcomeMessage, keyboard);
      this.logger.log('Welcome message sent');
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:`,
        error,
      );
    }
  }

  async sendMessage(chatId: number, message: string) {
    try {
      await this.bot.telegram.sendMessage(chatId, message);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${chatId}:`, error);
      throw error;
    }
  }
}
